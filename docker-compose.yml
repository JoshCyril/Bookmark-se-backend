---
services:
  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8080'
      - --scheme
      - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.26.1
    ports:
      - 8080:8080
      - 50051:50051
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: on-failure:0
    environment:
      IMAGE_INFERENCE_API: 'http://i2v-neural:8080'
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'img2vec-neural'
      ENABLE_MODULES: 'img2vec-neural'
      CLUSTER_HOSTNAME: 'node1'

  i2v-neural:
    image: cr.weaviate.io/semitechnologies/img2vec-pytorch:resnet50
    environment:
      ENABLE_CUDA: '0'

  chromadb:
    image: chromadb/chroma
    ports:
      - 8000:8000
    # environment:
    #   - CHROMA_SERVER_HOST="0.0.0.0"
    #   - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["http://0.0.0.0:3000"]
      # CHROMA_COORDINATOR_HOST: "0.0.0.0"
      # CHROMA_SERVER_CORS_ALLOW_ORIGINS: "*"
    # environment:
    #

  # node-app:
  #   build: .
  #   image: node:18
  #   working_dir: /usr/src/app
  #   volumes:
  #     - .:/usr/src/app
  #   command: node app.js
  #   ports:
  #     - 3000:3000
  #   restart: on-failure:0
  #   depends_on:
  #     - weaviate
  #     - i2v-neural
  #     - chromadb
  #   # Using a wait-for script to ensure dependent services are ready
  #   entrypoint: >
  #     sh -c "
  #     /usr/src/app/wait-for-it.sh weaviate:8080 -t 60 &&
  #     /usr/src/app/wait-for-it.sh i2v-neural:8080 -t 60 &&
  #     /usr/src/app/wait-for-it.sh chromadb:8000 -t 60 &&
  #     node app.js
  #     "

volumes:
  weaviate_data:
